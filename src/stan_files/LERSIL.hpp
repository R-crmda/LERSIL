/*
    LERSIL is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    LERSIL is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with LERSIL.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace model_LERSIL_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_LERSIL");
    reader.add_event(274, 274, "end", "model_LERSIL");
    return reader;
}

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
fill_matrix(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& free_elements,
                const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& skeleton, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 15;
        int R(0);
        (void) R;  // dummy to suppress unused var warning

        stan::math::fill(R, std::numeric_limits<int>::min());
        stan::math::assign(R,rows(skeleton));
        current_statement_begin__ = 16;
        int C(0);
        (void) C;  // dummy to suppress unused var warning

        stan::math::fill(C, std::numeric_limits<int>::min());
        stan::math::assign(C,cols(skeleton));
        current_statement_begin__ = 17;
        validate_non_negative_index("out", "R", R);
        validate_non_negative_index("out", "C", C);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(R),static_cast<Eigen::VectorXd::Index>(C));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);
        current_statement_begin__ = 18;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning

        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);


        current_statement_begin__ = 19;
        for (int c = 1; c <= C; ++c) {
            current_statement_begin__ = 19;
            for (int r = 1; r <= R; ++r) {
                {
                current_statement_begin__ = 20;
                local_scalar_t__ rc;
                (void) rc;  // dummy to suppress unused var warning

                stan::math::initialize(rc, DUMMY_VAR__);
                stan::math::fill(rc,DUMMY_VAR__);
                stan::math::assign(rc,get_base1(skeleton,r,c,"skeleton",1));


                current_statement_begin__ = 21;
                if (as_bool(is_nan(rc))) {

                    current_statement_begin__ = 22;
                    stan::math::assign(get_base1_lhs(out,r,c,"out",1), get_base1(free_elements,pos,"free_elements",1));
                    current_statement_begin__ = 23;
                    stan::math::assign(pos, (pos + 1));
                } else if (as_bool(is_inf(rc))) {

                    current_statement_begin__ = 26;
                    stan::math::assign(get_base1_lhs(out,r,c,"out",1), (logical_gt(rc,0) ? stan::math::promote_scalar<local_scalar_t__>(stan::math::exp(get_base1(free_elements,pos,"free_elements",1))) : stan::math::promote_scalar<local_scalar_t__>(-(stan::math::exp(get_base1(free_elements,pos,"free_elements",1)))) ));
                    current_statement_begin__ = 27;
                    stan::math::assign(pos, (pos + 1));
                } else {
                    current_statement_begin__ = 29;
                    stan::math::assign(get_base1_lhs(out,r,c,"out",1), get_base1(skeleton,r,c,"skeleton",1));
                }
                }
            }
        }
        current_statement_begin__ = 31;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct fill_matrix_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& free_elements,
                const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& skeleton, std::ostream* pstream__) const {
        return fill_matrix(free_elements, skeleton, pstream__);
    }
};

template <typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,Eigen::Dynamic>
to_dense_matrix(const int& m,
                    const int& n,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                    const std::vector<int>& v,
                    const std::vector<int>& u, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 38;
        validate_non_negative_index("out", "m", m);
        validate_non_negative_index("out", "n", n);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  out(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
        (void) out;  // dummy to suppress unused var warning

        stan::math::initialize(out, DUMMY_VAR__);
        stan::math::fill(out,DUMMY_VAR__);
        stan::math::assign(out,rep_matrix(0,m,n));
        current_statement_begin__ = 39;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning

        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);


        current_statement_begin__ = 40;
        for (int i = 1; i <= m; ++i) {
            {
            current_statement_begin__ = 41;
            int start(0);
            (void) start;  // dummy to suppress unused var warning

            stan::math::fill(start, std::numeric_limits<int>::min());
            stan::math::assign(start,get_base1(u,i,"u",1));
            current_statement_begin__ = 42;
            int nnz(0);
            (void) nnz;  // dummy to suppress unused var warning

            stan::math::fill(nnz, std::numeric_limits<int>::min());
            stan::math::assign(nnz,(get_base1(u,(i + 1),"u",1) - start));


            current_statement_begin__ = 43;
            for (int j = 1; j <= nnz; ++j) {

                current_statement_begin__ = 44;
                stan::math::assign(get_base1_lhs(out,i,get_base1(v,pos,"v",1),"out",1), get_base1(w,pos,"w",1));
                current_statement_begin__ = 45;
                stan::math::assign(pos, (pos + 1));
            }
            }
        }
        current_statement_begin__ = 48;
        return stan::math::promote_scalar<fun_return_scalar_t__>(out);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct to_dense_matrix_functor__ {
    template <typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const int& m,
                    const int& n,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,1>& w,
                    const std::vector<int>& v,
                    const std::vector<int>& u, std::ostream* pstream__) const {
        return to_dense_matrix(m, n, w, v, u, pstream__);
    }
};

#include <meta_header.hpp>
 class model_LERSIL : public prob_grad {
private:
    int p;
    int q;
    int m;
    int n;
    matrix_d S;
    int N;
    int has_data;
    vector<vector_d> YX;
    vector_d epsilon_sd_rate;
    vector_d delta_sd_rate;
    int len_w1;
    vector_d w1;
    vector<int> v1;
    vector<int> u1;
    int len_small_w1;
    vector<int> small_w1;
    double sd1;
    int len_w2;
    vector_d w2;
    vector<int> v2;
    vector<int> u2;
    int len_small_w2;
    vector<int> small_w2;
    double sd2;
    int len_w3;
    vector_d w3;
    vector<int> v3;
    vector<int> u3;
    int len_small_w3;
    vector<int> small_w3;
    double sd3;
    int len_w4;
    vector_d w4;
    vector<int> v4;
    vector<int> u4;
    int len_small_w4;
    vector<int> small_w4;
    double sd4;
    matrix_d Lambda_y_skeleton;
    matrix_d Lambda_x_skeleton;
    matrix_d Gamma_skeleton;
    matrix_d B_skeleton;
    matrix_d I;
    int len_free1;
    int len_free2;
    int len_free3;
    int len_free4;
    double NaN;
public:
    model_LERSIL(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_LERSIL(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_LERSIL_namespace::model_LERSIL";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 53;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            current_statement_begin__ = 54;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            current_statement_begin__ = 55;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            current_statement_begin__ = 56;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            current_statement_begin__ = 57;
            validate_non_negative_index("S", "(p + q)", (p + q));
            validate_non_negative_index("S", "(p + q)", (p + q));
            context__.validate_dims("data initialization", "S", "matrix_d", context__.to_vec((p + q),(p + q)));
            validate_non_negative_index("S", "(p + q)", (p + q));
            validate_non_negative_index("S", "(p + q)", (p + q));
            S = matrix_d(static_cast<Eigen::VectorXd::Index>((p + q)),static_cast<Eigen::VectorXd::Index>((p + q)));
            vals_r__ = context__.vals_r("S");
            pos__ = 0;
            size_t S_k_mat_lim__ = (p + q);
            for (size_t n_mat__ = 0; n_mat__ < S_k_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < S_k_mat_lim__; ++m_mat__) {
                    S(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 58;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 59;
            context__.validate_dims("data initialization", "has_data", "int", context__.to_vec());
            has_data = int(0);
            vals_i__ = context__.vals_i("has_data");
            pos__ = 0;
            has_data = vals_i__[pos__++];
            current_statement_begin__ = 60;
            validate_non_negative_index("YX", "(has_data ? N : 0 )", (has_data ? N : 0 ));
            validate_non_negative_index("YX", "(p + q)", (p + q));
            context__.validate_dims("data initialization", "YX", "vector_d", context__.to_vec((has_data ? N : 0 ),(p + q)));
            validate_non_negative_index("YX", "(has_data ? N : 0 )", (has_data ? N : 0 ));
            validate_non_negative_index("YX", "(p + q)", (p + q));
            YX = std::vector<vector_d>((has_data ? N : 0 ),vector_d(static_cast<Eigen::VectorXd::Index>((p + q))));
            vals_r__ = context__.vals_r("YX");
            pos__ = 0;
            size_t YX_i_vec_lim__ = (p + q);
            for (size_t i_vec__ = 0; i_vec__ < YX_i_vec_lim__; ++i_vec__) {
                size_t YX_limit_0__ = (has_data ? N : 0 );
                for (size_t i_0__ = 0; i_0__ < YX_limit_0__; ++i_0__) {
                    YX[i_0__][i_vec__] = vals_r__[pos__++];
            }
            }
            current_statement_begin__ = 63;
            validate_non_negative_index("epsilon_sd_rate", "p", p);
            context__.validate_dims("data initialization", "epsilon_sd_rate", "vector_d", context__.to_vec(p));
            validate_non_negative_index("epsilon_sd_rate", "p", p);
            epsilon_sd_rate = vector_d(static_cast<Eigen::VectorXd::Index>(p));
            vals_r__ = context__.vals_r("epsilon_sd_rate");
            pos__ = 0;
            size_t epsilon_sd_rate_i_vec_lim__ = p;
            for (size_t i_vec__ = 0; i_vec__ < epsilon_sd_rate_i_vec_lim__; ++i_vec__) {
                epsilon_sd_rate[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 64;
            validate_non_negative_index("delta_sd_rate", "q", q);
            context__.validate_dims("data initialization", "delta_sd_rate", "vector_d", context__.to_vec(q));
            validate_non_negative_index("delta_sd_rate", "q", q);
            delta_sd_rate = vector_d(static_cast<Eigen::VectorXd::Index>(q));
            vals_r__ = context__.vals_r("delta_sd_rate");
            pos__ = 0;
            size_t delta_sd_rate_i_vec_lim__ = q;
            for (size_t i_vec__ = 0; i_vec__ < delta_sd_rate_i_vec_lim__; ++i_vec__) {
                delta_sd_rate[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 69;
            context__.validate_dims("data initialization", "len_w1", "int", context__.to_vec());
            len_w1 = int(0);
            vals_i__ = context__.vals_i("len_w1");
            pos__ = 0;
            len_w1 = vals_i__[pos__++];
            current_statement_begin__ = 70;
            validate_non_negative_index("w1", "len_w1", len_w1);
            context__.validate_dims("data initialization", "w1", "vector_d", context__.to_vec(len_w1));
            validate_non_negative_index("w1", "len_w1", len_w1);
            w1 = vector_d(static_cast<Eigen::VectorXd::Index>(len_w1));
            vals_r__ = context__.vals_r("w1");
            pos__ = 0;
            size_t w1_i_vec_lim__ = len_w1;
            for (size_t i_vec__ = 0; i_vec__ < w1_i_vec_lim__; ++i_vec__) {
                w1[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 71;
            validate_non_negative_index("v1", "len_w1", len_w1);
            context__.validate_dims("data initialization", "v1", "int", context__.to_vec(len_w1));
            validate_non_negative_index("v1", "len_w1", len_w1);
            v1 = std::vector<int>(len_w1,int(0));
            vals_i__ = context__.vals_i("v1");
            pos__ = 0;
            size_t v1_limit_0__ = len_w1;
            for (size_t i_0__ = 0; i_0__ < v1_limit_0__; ++i_0__) {
                v1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 72;
            validate_non_negative_index("u1", "(p + 1)", (p + 1));
            context__.validate_dims("data initialization", "u1", "int", context__.to_vec((p + 1)));
            validate_non_negative_index("u1", "(p + 1)", (p + 1));
            u1 = std::vector<int>((p + 1),int(0));
            vals_i__ = context__.vals_i("u1");
            pos__ = 0;
            size_t u1_limit_0__ = (p + 1);
            for (size_t i_0__ = 0; i_0__ < u1_limit_0__; ++i_0__) {
                u1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 73;
            context__.validate_dims("data initialization", "len_small_w1", "int", context__.to_vec());
            len_small_w1 = int(0);
            vals_i__ = context__.vals_i("len_small_w1");
            pos__ = 0;
            len_small_w1 = vals_i__[pos__++];
            current_statement_begin__ = 74;
            validate_non_negative_index("small_w1", "len_small_w1", len_small_w1);
            context__.validate_dims("data initialization", "small_w1", "int", context__.to_vec(len_small_w1));
            validate_non_negative_index("small_w1", "len_small_w1", len_small_w1);
            small_w1 = std::vector<int>(len_small_w1,int(0));
            vals_i__ = context__.vals_i("small_w1");
            pos__ = 0;
            size_t small_w1_limit_0__ = len_small_w1;
            for (size_t i_0__ = 0; i_0__ < small_w1_limit_0__; ++i_0__) {
                small_w1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 77;
            context__.validate_dims("data initialization", "sd1", "double", context__.to_vec());
            sd1 = double(0);
            vals_r__ = context__.vals_r("sd1");
            pos__ = 0;
            sd1 = vals_r__[pos__++];
            current_statement_begin__ = 80;
            context__.validate_dims("data initialization", "len_w2", "int", context__.to_vec());
            len_w2 = int(0);
            vals_i__ = context__.vals_i("len_w2");
            pos__ = 0;
            len_w2 = vals_i__[pos__++];
            current_statement_begin__ = 81;
            validate_non_negative_index("w2", "len_w2", len_w2);
            context__.validate_dims("data initialization", "w2", "vector_d", context__.to_vec(len_w2));
            validate_non_negative_index("w2", "len_w2", len_w2);
            w2 = vector_d(static_cast<Eigen::VectorXd::Index>(len_w2));
            vals_r__ = context__.vals_r("w2");
            pos__ = 0;
            size_t w2_i_vec_lim__ = len_w2;
            for (size_t i_vec__ = 0; i_vec__ < w2_i_vec_lim__; ++i_vec__) {
                w2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 82;
            validate_non_negative_index("v2", "len_w2", len_w2);
            context__.validate_dims("data initialization", "v2", "int", context__.to_vec(len_w2));
            validate_non_negative_index("v2", "len_w2", len_w2);
            v2 = std::vector<int>(len_w2,int(0));
            vals_i__ = context__.vals_i("v2");
            pos__ = 0;
            size_t v2_limit_0__ = len_w2;
            for (size_t i_0__ = 0; i_0__ < v2_limit_0__; ++i_0__) {
                v2[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 83;
            validate_non_negative_index("u2", "(q + 1)", (q + 1));
            context__.validate_dims("data initialization", "u2", "int", context__.to_vec((q + 1)));
            validate_non_negative_index("u2", "(q + 1)", (q + 1));
            u2 = std::vector<int>((q + 1),int(0));
            vals_i__ = context__.vals_i("u2");
            pos__ = 0;
            size_t u2_limit_0__ = (q + 1);
            for (size_t i_0__ = 0; i_0__ < u2_limit_0__; ++i_0__) {
                u2[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 84;
            context__.validate_dims("data initialization", "len_small_w2", "int", context__.to_vec());
            len_small_w2 = int(0);
            vals_i__ = context__.vals_i("len_small_w2");
            pos__ = 0;
            len_small_w2 = vals_i__[pos__++];
            current_statement_begin__ = 85;
            validate_non_negative_index("small_w2", "len_small_w2", len_small_w2);
            context__.validate_dims("data initialization", "small_w2", "int", context__.to_vec(len_small_w2));
            validate_non_negative_index("small_w2", "len_small_w2", len_small_w2);
            small_w2 = std::vector<int>(len_small_w2,int(0));
            vals_i__ = context__.vals_i("small_w2");
            pos__ = 0;
            size_t small_w2_limit_0__ = len_small_w2;
            for (size_t i_0__ = 0; i_0__ < small_w2_limit_0__; ++i_0__) {
                small_w2[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 86;
            context__.validate_dims("data initialization", "sd2", "double", context__.to_vec());
            sd2 = double(0);
            vals_r__ = context__.vals_r("sd2");
            pos__ = 0;
            sd2 = vals_r__[pos__++];
            current_statement_begin__ = 89;
            context__.validate_dims("data initialization", "len_w3", "int", context__.to_vec());
            len_w3 = int(0);
            vals_i__ = context__.vals_i("len_w3");
            pos__ = 0;
            len_w3 = vals_i__[pos__++];
            current_statement_begin__ = 90;
            validate_non_negative_index("w3", "len_w3", len_w3);
            context__.validate_dims("data initialization", "w3", "vector_d", context__.to_vec(len_w3));
            validate_non_negative_index("w3", "len_w3", len_w3);
            w3 = vector_d(static_cast<Eigen::VectorXd::Index>(len_w3));
            vals_r__ = context__.vals_r("w3");
            pos__ = 0;
            size_t w3_i_vec_lim__ = len_w3;
            for (size_t i_vec__ = 0; i_vec__ < w3_i_vec_lim__; ++i_vec__) {
                w3[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 91;
            validate_non_negative_index("v3", "len_w3", len_w3);
            context__.validate_dims("data initialization", "v3", "int", context__.to_vec(len_w3));
            validate_non_negative_index("v3", "len_w3", len_w3);
            v3 = std::vector<int>(len_w3,int(0));
            vals_i__ = context__.vals_i("v3");
            pos__ = 0;
            size_t v3_limit_0__ = len_w3;
            for (size_t i_0__ = 0; i_0__ < v3_limit_0__; ++i_0__) {
                v3[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 92;
            validate_non_negative_index("u3", "(m + 1)", (m + 1));
            context__.validate_dims("data initialization", "u3", "int", context__.to_vec((m + 1)));
            validate_non_negative_index("u3", "(m + 1)", (m + 1));
            u3 = std::vector<int>((m + 1),int(0));
            vals_i__ = context__.vals_i("u3");
            pos__ = 0;
            size_t u3_limit_0__ = (m + 1);
            for (size_t i_0__ = 0; i_0__ < u3_limit_0__; ++i_0__) {
                u3[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 93;
            context__.validate_dims("data initialization", "len_small_w3", "int", context__.to_vec());
            len_small_w3 = int(0);
            vals_i__ = context__.vals_i("len_small_w3");
            pos__ = 0;
            len_small_w3 = vals_i__[pos__++];
            current_statement_begin__ = 94;
            validate_non_negative_index("small_w3", "len_small_w3", len_small_w3);
            context__.validate_dims("data initialization", "small_w3", "int", context__.to_vec(len_small_w3));
            validate_non_negative_index("small_w3", "len_small_w3", len_small_w3);
            small_w3 = std::vector<int>(len_small_w3,int(0));
            vals_i__ = context__.vals_i("small_w3");
            pos__ = 0;
            size_t small_w3_limit_0__ = len_small_w3;
            for (size_t i_0__ = 0; i_0__ < small_w3_limit_0__; ++i_0__) {
                small_w3[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 95;
            context__.validate_dims("data initialization", "sd3", "double", context__.to_vec());
            sd3 = double(0);
            vals_r__ = context__.vals_r("sd3");
            pos__ = 0;
            sd3 = vals_r__[pos__++];
            current_statement_begin__ = 98;
            context__.validate_dims("data initialization", "len_w4", "int", context__.to_vec());
            len_w4 = int(0);
            vals_i__ = context__.vals_i("len_w4");
            pos__ = 0;
            len_w4 = vals_i__[pos__++];
            current_statement_begin__ = 99;
            validate_non_negative_index("w4", "len_w4", len_w4);
            context__.validate_dims("data initialization", "w4", "vector_d", context__.to_vec(len_w4));
            validate_non_negative_index("w4", "len_w4", len_w4);
            w4 = vector_d(static_cast<Eigen::VectorXd::Index>(len_w4));
            vals_r__ = context__.vals_r("w4");
            pos__ = 0;
            size_t w4_i_vec_lim__ = len_w4;
            for (size_t i_vec__ = 0; i_vec__ < w4_i_vec_lim__; ++i_vec__) {
                w4[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 100;
            validate_non_negative_index("v4", "len_w4", len_w4);
            context__.validate_dims("data initialization", "v4", "int", context__.to_vec(len_w4));
            validate_non_negative_index("v4", "len_w4", len_w4);
            v4 = std::vector<int>(len_w4,int(0));
            vals_i__ = context__.vals_i("v4");
            pos__ = 0;
            size_t v4_limit_0__ = len_w4;
            for (size_t i_0__ = 0; i_0__ < v4_limit_0__; ++i_0__) {
                v4[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 101;
            validate_non_negative_index("u4", "(m + 1)", (m + 1));
            context__.validate_dims("data initialization", "u4", "int", context__.to_vec((m + 1)));
            validate_non_negative_index("u4", "(m + 1)", (m + 1));
            u4 = std::vector<int>((m + 1),int(0));
            vals_i__ = context__.vals_i("u4");
            pos__ = 0;
            size_t u4_limit_0__ = (m + 1);
            for (size_t i_0__ = 0; i_0__ < u4_limit_0__; ++i_0__) {
                u4[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 102;
            context__.validate_dims("data initialization", "len_small_w4", "int", context__.to_vec());
            len_small_w4 = int(0);
            vals_i__ = context__.vals_i("len_small_w4");
            pos__ = 0;
            len_small_w4 = vals_i__[pos__++];
            current_statement_begin__ = 103;
            validate_non_negative_index("small_w4", "len_small_w4", len_small_w4);
            context__.validate_dims("data initialization", "small_w4", "int", context__.to_vec(len_small_w4));
            validate_non_negative_index("small_w4", "len_small_w4", len_small_w4);
            small_w4 = std::vector<int>(len_small_w4,int(0));
            vals_i__ = context__.vals_i("small_w4");
            pos__ = 0;
            size_t small_w4_limit_0__ = len_small_w4;
            for (size_t i_0__ = 0; i_0__ < small_w4_limit_0__; ++i_0__) {
                small_w4[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 104;
            context__.validate_dims("data initialization", "sd4", "double", context__.to_vec());
            sd4 = double(0);
            vals_r__ = context__.vals_r("sd4");
            pos__ = 0;
            sd4 = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 53;
            check_greater_or_equal(function__,"p",p,0);
            current_statement_begin__ = 54;
            check_greater_or_equal(function__,"q",q,0);
            current_statement_begin__ = 55;
            check_greater_or_equal(function__,"m",m,0);
            current_statement_begin__ = 56;
            check_greater_or_equal(function__,"n",n,0);
            current_statement_begin__ = 57;
            stan::math::check_cov_matrix(function__,"S",S);
            current_statement_begin__ = 58;
            check_greater_or_equal(function__,"N",N,((p + q) + 1));
            current_statement_begin__ = 59;
            check_greater_or_equal(function__,"has_data",has_data,0);
            check_less_or_equal(function__,"has_data",has_data,1);
            current_statement_begin__ = 60;
            current_statement_begin__ = 63;
            check_greater_or_equal(function__,"epsilon_sd_rate",epsilon_sd_rate,0);
            current_statement_begin__ = 64;
            check_greater_or_equal(function__,"delta_sd_rate",delta_sd_rate,0);
            current_statement_begin__ = 69;
            check_greater_or_equal(function__,"len_w1",len_w1,0);
            current_statement_begin__ = 70;
            current_statement_begin__ = 71;
            for (int k0__ = 0; k0__ < len_w1; ++k0__) {
                check_greater_or_equal(function__,"v1[k0__]",v1[k0__],1);
            }
            current_statement_begin__ = 72;
            for (int k0__ = 0; k0__ < (p + 1); ++k0__) {
                check_greater_or_equal(function__,"u1[k0__]",u1[k0__],1);
            }
            current_statement_begin__ = 73;
            check_greater_or_equal(function__,"len_small_w1",len_small_w1,0);
            current_statement_begin__ = 74;
            for (int k0__ = 0; k0__ < len_small_w1; ++k0__) {
                check_greater_or_equal(function__,"small_w1[k0__]",small_w1[k0__],1);
            }
            current_statement_begin__ = 77;
            check_greater_or_equal(function__,"sd1",sd1,0);
            current_statement_begin__ = 80;
            check_greater_or_equal(function__,"len_w2",len_w2,0);
            current_statement_begin__ = 81;
            current_statement_begin__ = 82;
            for (int k0__ = 0; k0__ < len_w2; ++k0__) {
                check_greater_or_equal(function__,"v2[k0__]",v2[k0__],1);
            }
            current_statement_begin__ = 83;
            for (int k0__ = 0; k0__ < (q + 1); ++k0__) {
                check_greater_or_equal(function__,"u2[k0__]",u2[k0__],1);
            }
            current_statement_begin__ = 84;
            check_greater_or_equal(function__,"len_small_w2",len_small_w2,0);
            current_statement_begin__ = 85;
            for (int k0__ = 0; k0__ < len_small_w2; ++k0__) {
                check_greater_or_equal(function__,"small_w2[k0__]",small_w2[k0__],1);
            }
            current_statement_begin__ = 86;
            check_greater_or_equal(function__,"sd2",sd2,0);
            current_statement_begin__ = 89;
            check_greater_or_equal(function__,"len_w3",len_w3,0);
            current_statement_begin__ = 90;
            current_statement_begin__ = 91;
            for (int k0__ = 0; k0__ < len_w3; ++k0__) {
                check_greater_or_equal(function__,"v3[k0__]",v3[k0__],1);
            }
            current_statement_begin__ = 92;
            for (int k0__ = 0; k0__ < (m + 1); ++k0__) {
                check_greater_or_equal(function__,"u3[k0__]",u3[k0__],1);
            }
            current_statement_begin__ = 93;
            check_greater_or_equal(function__,"len_small_w3",len_small_w3,0);
            current_statement_begin__ = 94;
            for (int k0__ = 0; k0__ < len_small_w3; ++k0__) {
                check_greater_or_equal(function__,"small_w3[k0__]",small_w3[k0__],1);
            }
            current_statement_begin__ = 95;
            check_greater_or_equal(function__,"sd3",sd3,0);
            current_statement_begin__ = 98;
            check_greater_or_equal(function__,"len_w4",len_w4,0);
            current_statement_begin__ = 99;
            current_statement_begin__ = 100;
            for (int k0__ = 0; k0__ < len_w4; ++k0__) {
                check_greater_or_equal(function__,"v4[k0__]",v4[k0__],1);
            }
            current_statement_begin__ = 101;
            for (int k0__ = 0; k0__ < (m + 1); ++k0__) {
                check_greater_or_equal(function__,"u4[k0__]",u4[k0__],1);
            }
            current_statement_begin__ = 102;
            check_greater_or_equal(function__,"len_small_w4",len_small_w4,0);
            current_statement_begin__ = 103;
            for (int k0__ = 0; k0__ < len_small_w4; ++k0__) {
                check_greater_or_equal(function__,"small_w4[k0__]",small_w4[k0__],1);
            }
            current_statement_begin__ = 104;
            check_greater_or_equal(function__,"sd4",sd4,0);
            // initialize data variables
            current_statement_begin__ = 107;
            validate_non_negative_index("Lambda_y_skeleton", "p", p);
            validate_non_negative_index("Lambda_y_skeleton", "m", m);
            Lambda_y_skeleton = matrix_d(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(m));
            stan::math::fill(Lambda_y_skeleton,DUMMY_VAR__);
            stan::math::assign(Lambda_y_skeleton,to_dense_matrix(p,m,w1,v1,u1, pstream__));
            current_statement_begin__ = 108;
            validate_non_negative_index("Lambda_x_skeleton", "q", q);
            validate_non_negative_index("Lambda_x_skeleton", "n", n);
            Lambda_x_skeleton = matrix_d(static_cast<Eigen::VectorXd::Index>(q),static_cast<Eigen::VectorXd::Index>(n));
            stan::math::fill(Lambda_x_skeleton,DUMMY_VAR__);
            stan::math::assign(Lambda_x_skeleton,to_dense_matrix(q,n,w2,v2,u2, pstream__));
            current_statement_begin__ = 109;
            validate_non_negative_index("Gamma_skeleton", "m", m);
            validate_non_negative_index("Gamma_skeleton", "n", n);
            Gamma_skeleton = matrix_d(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
            stan::math::fill(Gamma_skeleton,DUMMY_VAR__);
            stan::math::assign(Gamma_skeleton,to_dense_matrix(m,n,w3,v3,u3, pstream__));
            current_statement_begin__ = 110;
            validate_non_negative_index("B_skeleton", "m", m);
            validate_non_negative_index("B_skeleton", "m", m);
            B_skeleton = matrix_d(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            stan::math::fill(B_skeleton,DUMMY_VAR__);
            stan::math::assign(B_skeleton,to_dense_matrix(m,m,w4,v4,u4, pstream__));
            current_statement_begin__ = 112;
            validate_non_negative_index("I", "m", m);
            validate_non_negative_index("I", "m", m);
            I = matrix_d(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            stan::math::fill(I,DUMMY_VAR__);
            stan::math::assign(I,diag_matrix(rep_vector(1,m)));
            current_statement_begin__ = 114;
            len_free1 = int(0);
            stan::math::fill(len_free1, std::numeric_limits<int>::min());
            stan::math::assign(len_free1,len_small_w1);
            current_statement_begin__ = 115;
            len_free2 = int(0);
            stan::math::fill(len_free2, std::numeric_limits<int>::min());
            stan::math::assign(len_free2,len_small_w2);
            current_statement_begin__ = 116;
            len_free3 = int(0);
            stan::math::fill(len_free3, std::numeric_limits<int>::min());
            stan::math::assign(len_free3,len_small_w3);
            current_statement_begin__ = 117;
            len_free4 = int(0);
            stan::math::fill(len_free4, std::numeric_limits<int>::min());
            stan::math::assign(len_free4,len_small_w4);
            current_statement_begin__ = 119;
            NaN = double(0);
            stan::math::fill(NaN,DUMMY_VAR__);
            stan::math::assign(NaN,stan::math::not_a_number());

            current_statement_begin__ = 121;
            for (int i = 1; i <= p; ++i) {
                {
                current_statement_begin__ = 122;
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning

                stan::math::fill(pos, std::numeric_limits<int>::min());
                stan::math::assign(pos,1);


                current_statement_begin__ = 123;
                for (int j = 1; j <= m; ++j) {

                    current_statement_begin__ = 124;
                    if (as_bool(is_inf(get_base1(Lambda_y_skeleton,i,j,"Lambda_y_skeleton",1)))) {
                        current_statement_begin__ = 124;
                        stan::math::assign(len_free1, (len_free1 + 1));
                    }
                    current_statement_begin__ = 125;
                    if (as_bool((primitive_value(logical_eq(get_base1(Lambda_y_skeleton,i,j,"Lambda_y_skeleton",1),0)) && primitive_value((primitive_value(logical_eq(len_w1,0)) || primitive_value(logical_neq(get_base1(w1,pos,"w1",1),0))))))) {

                        current_statement_begin__ = 126;
                        stan::math::assign(get_base1_lhs(Lambda_y_skeleton,i,j,"Lambda_y_skeleton",1), NaN);
                    } else {
                        current_statement_begin__ = 127;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                }
            }
            current_statement_begin__ = 132;
            for (int i = 1; i <= q; ++i) {
                {
                current_statement_begin__ = 133;
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning

                stan::math::fill(pos, std::numeric_limits<int>::min());
                stan::math::assign(pos,1);


                current_statement_begin__ = 134;
                for (int j = 1; j <= n; ++j) {

                    current_statement_begin__ = 135;
                    if (as_bool(is_inf(get_base1(Lambda_x_skeleton,i,j,"Lambda_x_skeleton",1)))) {
                        current_statement_begin__ = 135;
                        stan::math::assign(len_free2, (len_free2 + 1));
                    }
                    current_statement_begin__ = 136;
                    if (as_bool((primitive_value(logical_eq(get_base1(Lambda_x_skeleton,i,j,"Lambda_x_skeleton",1),0)) && primitive_value((primitive_value(logical_eq(len_w2,0)) || primitive_value(logical_neq(get_base1(w2,pos,"w2",1),0))))))) {

                        current_statement_begin__ = 137;
                        stan::math::assign(get_base1_lhs(Lambda_x_skeleton,i,j,"Lambda_x_skeleton",1), NaN);
                    } else {
                        current_statement_begin__ = 138;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                }
            }
            current_statement_begin__ = 143;
            for (int i = 1; i <= m; ++i) {
                {
                current_statement_begin__ = 144;
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning

                stan::math::fill(pos, std::numeric_limits<int>::min());
                stan::math::assign(pos,1);


                current_statement_begin__ = 145;
                for (int j = 1; j <= n; ++j) {

                    current_statement_begin__ = 146;
                    if (as_bool(is_inf(get_base1(Gamma_skeleton,i,j,"Gamma_skeleton",1)))) {
                        current_statement_begin__ = 146;
                        stan::math::assign(len_free3, (len_free3 + 1));
                    }
                    current_statement_begin__ = 147;
                    if (as_bool((primitive_value(logical_eq(get_base1(Gamma_skeleton,i,j,"Gamma_skeleton",1),0)) && primitive_value((primitive_value(logical_eq(len_w3,0)) || primitive_value(logical_neq(get_base1(w3,pos,"w3",1),0))))))) {

                        current_statement_begin__ = 148;
                        stan::math::assign(get_base1_lhs(Gamma_skeleton,i,j,"Gamma_skeleton",1), NaN);
                    } else {
                        current_statement_begin__ = 149;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                }
            }
            current_statement_begin__ = 154;
            for (int i = 1; i <= m; ++i) {
                {
                current_statement_begin__ = 155;
                int pos(0);
                (void) pos;  // dummy to suppress unused var warning

                stan::math::fill(pos, std::numeric_limits<int>::min());
                stan::math::assign(pos,1);


                current_statement_begin__ = 156;
                for (int j = 1; j <= m; ++j) {

                    current_statement_begin__ = 157;
                    if (as_bool((primitive_value(logical_gte(j,i)) && primitive_value(logical_neq(get_base1(B_skeleton,i,j,"B_skeleton",1),0))))) {
                        current_statement_begin__ = 158;
                        std::stringstream errmsg_stream__;
                        errmsg_stream__ << "B_skeleton must be strictly lower triangular for this model";
                        throw std::domain_error(errmsg_stream__.str());
                    }
                    current_statement_begin__ = 160;
                    if (as_bool(is_inf(get_base1(B_skeleton,i,j,"B_skeleton",1)))) {
                        current_statement_begin__ = 160;
                        stan::math::assign(len_free4, (len_free4 + 1));
                    }
                    current_statement_begin__ = 161;
                    if (as_bool((primitive_value(logical_eq(get_base1(B_skeleton,i,j,"B_skeleton",1),0)) && primitive_value(logical_neq(get_base1(w4,pos,"w4",1),0))))) {
                        current_statement_begin__ = 161;
                        stan::math::assign(get_base1_lhs(B_skeleton,i,j,"B_skeleton",1), NaN);
                    } else {
                        current_statement_begin__ = 162;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                }
            }

            // validate transformed data
            current_statement_begin__ = 107;
            current_statement_begin__ = 108;
            current_statement_begin__ = 109;
            current_statement_begin__ = 110;
            current_statement_begin__ = 112;
            current_statement_begin__ = 114;
            current_statement_begin__ = 115;
            current_statement_begin__ = 116;
            current_statement_begin__ = 117;
            current_statement_begin__ = 119;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 168;
            validate_non_negative_index("Lambda_y_free", "len_free1", len_free1);
            num_params_r__ += len_free1;
            current_statement_begin__ = 169;
            validate_non_negative_index("Lambda_x_free", "len_free2", len_free2);
            num_params_r__ += len_free2;
            current_statement_begin__ = 170;
            validate_non_negative_index("Gamma_free", "len_free3", len_free3);
            num_params_r__ += len_free3;
            current_statement_begin__ = 171;
            validate_non_negative_index("B_free", "len_free4", len_free4);
            num_params_r__ += len_free4;
            current_statement_begin__ = 174;
            validate_non_negative_index("L_Psi", "m", m);
            num_params_r__ += ((m * (m - 1)) / 2);
            current_statement_begin__ = 176;
            validate_non_negative_index("L_Phi", "n", n);
            num_params_r__ += ((n * (n - 1)) / 2);
            current_statement_begin__ = 180;
            validate_non_negative_index("epsilon_sd", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 181;
            validate_non_negative_index("delta_sd", "q", q);
            num_params_r__ += q;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_LERSIL() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("Lambda_y_free")))
            throw std::runtime_error("variable Lambda_y_free missing");
        vals_r__ = context__.vals_r("Lambda_y_free");
        pos__ = 0U;
        validate_non_negative_index("Lambda_y_free", "len_free1", len_free1);
        context__.validate_dims("initialization", "Lambda_y_free", "vector_d", context__.to_vec(len_free1));
        vector_d Lambda_y_free(static_cast<Eigen::VectorXd::Index>(len_free1));
        for (int j1__ = 0U; j1__ < len_free1; ++j1__)
            Lambda_y_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(Lambda_y_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Lambda_y_free: ") + e.what());
        }

        if (!(context__.contains_r("Lambda_x_free")))
            throw std::runtime_error("variable Lambda_x_free missing");
        vals_r__ = context__.vals_r("Lambda_x_free");
        pos__ = 0U;
        validate_non_negative_index("Lambda_x_free", "len_free2", len_free2);
        context__.validate_dims("initialization", "Lambda_x_free", "vector_d", context__.to_vec(len_free2));
        vector_d Lambda_x_free(static_cast<Eigen::VectorXd::Index>(len_free2));
        for (int j1__ = 0U; j1__ < len_free2; ++j1__)
            Lambda_x_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(Lambda_x_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Lambda_x_free: ") + e.what());
        }

        if (!(context__.contains_r("Gamma_free")))
            throw std::runtime_error("variable Gamma_free missing");
        vals_r__ = context__.vals_r("Gamma_free");
        pos__ = 0U;
        validate_non_negative_index("Gamma_free", "len_free3", len_free3);
        context__.validate_dims("initialization", "Gamma_free", "vector_d", context__.to_vec(len_free3));
        vector_d Gamma_free(static_cast<Eigen::VectorXd::Index>(len_free3));
        for (int j1__ = 0U; j1__ < len_free3; ++j1__)
            Gamma_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(Gamma_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Gamma_free: ") + e.what());
        }

        if (!(context__.contains_r("B_free")))
            throw std::runtime_error("variable B_free missing");
        vals_r__ = context__.vals_r("B_free");
        pos__ = 0U;
        validate_non_negative_index("B_free", "len_free4", len_free4);
        context__.validate_dims("initialization", "B_free", "vector_d", context__.to_vec(len_free4));
        vector_d B_free(static_cast<Eigen::VectorXd::Index>(len_free4));
        for (int j1__ = 0U; j1__ < len_free4; ++j1__)
            B_free(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(B_free);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable B_free: ") + e.what());
        }

        if (!(context__.contains_r("L_Psi")))
            throw std::runtime_error("variable L_Psi missing");
        vals_r__ = context__.vals_r("L_Psi");
        pos__ = 0U;
        validate_non_negative_index("L_Psi", "m", m);
        validate_non_negative_index("L_Psi", "m", m);
        context__.validate_dims("initialization", "L_Psi", "matrix_d", context__.to_vec(m,m));
        matrix_d L_Psi(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
        for (int j2__ = 0U; j2__ < m; ++j2__)
            for (int j1__ = 0U; j1__ < m; ++j1__)
                L_Psi(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(L_Psi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_Psi: ") + e.what());
        }

        if (!(context__.contains_r("L_Phi")))
            throw std::runtime_error("variable L_Phi missing");
        vals_r__ = context__.vals_r("L_Phi");
        pos__ = 0U;
        validate_non_negative_index("L_Phi", "n", n);
        validate_non_negative_index("L_Phi", "n", n);
        context__.validate_dims("initialization", "L_Phi", "matrix_d", context__.to_vec(n,n));
        matrix_d L_Phi(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(n));
        for (int j2__ = 0U; j2__ < n; ++j2__)
            for (int j1__ = 0U; j1__ < n; ++j1__)
                L_Phi(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(L_Phi);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable L_Phi: ") + e.what());
        }

        if (!(context__.contains_r("epsilon_sd")))
            throw std::runtime_error("variable epsilon_sd missing");
        vals_r__ = context__.vals_r("epsilon_sd");
        pos__ = 0U;
        validate_non_negative_index("epsilon_sd", "p", p);
        context__.validate_dims("initialization", "epsilon_sd", "vector_d", context__.to_vec(p));
        vector_d epsilon_sd(static_cast<Eigen::VectorXd::Index>(p));
        for (int j1__ = 0U; j1__ < p; ++j1__)
            epsilon_sd(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,epsilon_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable epsilon_sd: ") + e.what());
        }

        if (!(context__.contains_r("delta_sd")))
            throw std::runtime_error("variable delta_sd missing");
        vals_r__ = context__.vals_r("delta_sd");
        pos__ = 0U;
        validate_non_negative_index("delta_sd", "q", q);
        context__.validate_dims("initialization", "delta_sd", "vector_d", context__.to_vec(q));
        vector_d delta_sd(static_cast<Eigen::VectorXd::Index>(q));
        for (int j1__ = 0U; j1__ < q; ++j1__)
            delta_sd(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,delta_sd);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta_sd: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Lambda_y_free;
            (void) Lambda_y_free;  // dummy to suppress unused var warning
            if (jacobian__)
                Lambda_y_free = in__.vector_constrain(len_free1,lp__);
            else
                Lambda_y_free = in__.vector_constrain(len_free1);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Lambda_x_free;
            (void) Lambda_x_free;  // dummy to suppress unused var warning
            if (jacobian__)
                Lambda_x_free = in__.vector_constrain(len_free2,lp__);
            else
                Lambda_x_free = in__.vector_constrain(len_free2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Gamma_free;
            (void) Gamma_free;  // dummy to suppress unused var warning
            if (jacobian__)
                Gamma_free = in__.vector_constrain(len_free3,lp__);
            else
                Gamma_free = in__.vector_constrain(len_free3);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  B_free;
            (void) B_free;  // dummy to suppress unused var warning
            if (jacobian__)
                B_free = in__.vector_constrain(len_free4,lp__);
            else
                B_free = in__.vector_constrain(len_free4);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L_Psi;
            (void) L_Psi;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Psi = in__.cholesky_corr_constrain(m,lp__);
            else
                L_Psi = in__.cholesky_corr_constrain(m);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L_Phi;
            (void) L_Phi;  // dummy to suppress unused var warning
            if (jacobian__)
                L_Phi = in__.cholesky_corr_constrain(n,lp__);
            else
                L_Phi = in__.cholesky_corr_constrain(n);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  epsilon_sd;
            (void) epsilon_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                epsilon_sd = in__.vector_lb_constrain(0,p,lp__);
            else
                epsilon_sd = in__.vector_lb_constrain(0,p);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  delta_sd;
            (void) delta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_sd = in__.vector_lb_constrain(0,q,lp__);
            else
                delta_sd = in__.vector_lb_constrain(0,q);


            // transformed parameters
            current_statement_begin__ = 184;
            validate_non_negative_index("Lambda_y", "p", p);
            validate_non_negative_index("Lambda_y", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_y(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(m));
            (void) Lambda_y;  // dummy to suppress unused var warning

            stan::math::initialize(Lambda_y, DUMMY_VAR__);
            stan::math::fill(Lambda_y,DUMMY_VAR__);
            stan::math::assign(Lambda_y,fill_matrix(Lambda_y_free,Lambda_y_skeleton, pstream__));
            current_statement_begin__ = 185;
            validate_non_negative_index("Lambda_x", "q", q);
            validate_non_negative_index("Lambda_x", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_x(static_cast<Eigen::VectorXd::Index>(q),static_cast<Eigen::VectorXd::Index>(n));
            (void) Lambda_x;  // dummy to suppress unused var warning

            stan::math::initialize(Lambda_x, DUMMY_VAR__);
            stan::math::fill(Lambda_x,DUMMY_VAR__);
            stan::math::assign(Lambda_x,fill_matrix(Lambda_x_free,Lambda_x_skeleton, pstream__));
            current_statement_begin__ = 186;
            validate_non_negative_index("Gamma", "m", m);
            validate_non_negative_index("Gamma", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Gamma(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
            (void) Gamma;  // dummy to suppress unused var warning

            stan::math::initialize(Gamma, DUMMY_VAR__);
            stan::math::fill(Gamma,DUMMY_VAR__);
            stan::math::assign(Gamma,fill_matrix(Gamma_free,Gamma_skeleton, pstream__));
            current_statement_begin__ = 187;
            validate_non_negative_index("B", "m", m);
            validate_non_negative_index("B", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  B(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            (void) B;  // dummy to suppress unused var warning

            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B,DUMMY_VAR__);
            stan::math::assign(B,fill_matrix(B_free,B_skeleton, pstream__));
            current_statement_begin__ = 189;
            validate_non_negative_index("Psi", "m", m);
            validate_non_negative_index("Psi", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Psi(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            (void) Psi;  // dummy to suppress unused var warning

            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi,DUMMY_VAR__);
            stan::math::assign(Psi,multiply_lower_tri_self_transpose(L_Psi));
            current_statement_begin__ = 190;
            validate_non_negative_index("PHI", "n", n);
            validate_non_negative_index("PHI", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  PHI(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(n));
            (void) PHI;  // dummy to suppress unused var warning

            stan::math::initialize(PHI, DUMMY_VAR__);
            stan::math::fill(PHI,DUMMY_VAR__);
            stan::math::assign(PHI,multiply_lower_tri_self_transpose(L_Phi));



            // validate transformed parameters
            for (int i0__ = 0; i0__ < p; ++i0__) {
                for (int i1__ = 0; i1__ < m; ++i1__) {
                    if (stan::math::is_uninitialized(Lambda_y(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Lambda_y" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < q; ++i0__) {
                for (int i1__ = 0; i1__ < n; ++i1__) {
                    if (stan::math::is_uninitialized(Lambda_x(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Lambda_x" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < m; ++i0__) {
                for (int i1__ = 0; i1__ < n; ++i1__) {
                    if (stan::math::is_uninitialized(Gamma(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Gamma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < m; ++i0__) {
                for (int i1__ = 0; i1__ < m; ++i1__) {
                    if (stan::math::is_uninitialized(B(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: B" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < m; ++i0__) {
                for (int i1__ = 0; i1__ < m; ++i1__) {
                    if (stan::math::is_uninitialized(Psi(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Psi" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n; ++i0__) {
                for (int i1__ = 0; i1__ < n; ++i1__) {
                    if (stan::math::is_uninitialized(PHI(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: PHI" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 184;
            current_statement_begin__ = 185;
            current_statement_begin__ = 186;
            current_statement_begin__ = 187;
            current_statement_begin__ = 189;
            current_statement_begin__ = 190;

            // model body
            {
            current_statement_begin__ = 194;
            validate_non_negative_index("Lambda_y_A", "p", p);
            validate_non_negative_index("Lambda_y_A", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_y_A(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(m));
            (void) Lambda_y_A;  // dummy to suppress unused var warning

            stan::math::initialize(Lambda_y_A, DUMMY_VAR__);
            stan::math::fill(Lambda_y_A,DUMMY_VAR__);
            stan::math::assign(Lambda_y_A,mdivide_right_tri_low(Lambda_y,subtract(I,B)));
            current_statement_begin__ = 195;
            validate_non_negative_index("Lambda_xt", "n", n);
            validate_non_negative_index("Lambda_xt", "q", q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_xt(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(q));
            (void) Lambda_xt;  // dummy to suppress unused var warning

            stan::math::initialize(Lambda_xt, DUMMY_VAR__);
            stan::math::fill(Lambda_xt,DUMMY_VAR__);
            stan::math::assign(Lambda_xt,transpose(Lambda_x));
            current_statement_begin__ = 198;
            validate_non_negative_index("Sigma", "(p + q)", (p + q));
            validate_non_negative_index("Sigma", "(p + q)", (p + q));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Sigma(static_cast<Eigen::VectorXd::Index>((p + q)),static_cast<Eigen::VectorXd::Index>((p + q)));
            (void) Sigma;  // dummy to suppress unused var warning

            stan::math::initialize(Sigma, DUMMY_VAR__);
            stan::math::fill(Sigma,DUMMY_VAR__);
            current_statement_begin__ = 200;
            validate_non_negative_index("top_right", "p", p);
            validate_non_negative_index("top_right", "q", q);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  top_right(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(q));
            (void) top_right;  // dummy to suppress unused var warning

            stan::math::initialize(top_right, DUMMY_VAR__);
            stan::math::fill(top_right,DUMMY_VAR__);
            stan::math::assign(top_right,multiply(multiply(multiply(Lambda_y_A,Gamma),PHI),Lambda_xt));


            current_statement_begin__ = 202;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), 
                        quad_form(add(quad_form(PHI,transpose(Gamma)),Psi),transpose(Lambda_y_A)), 
                        "assigning variable Sigma");
            current_statement_begin__ = 203;
            for (int i = 1; i <= p; ++i) {
                current_statement_begin__ = 203;
                stan::math::assign(get_base1_lhs(Sigma,i,i,"Sigma",1), (get_base1(Sigma,i,i,"Sigma",1) + square(get_base1(epsilon_sd,i,"epsilon_sd",1))));
            }
            current_statement_begin__ = 204;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::cons_list(stan::model::index_min_max((p + 1), (p + q)), stan::model::nil_index_list())), 
                        top_right, 
                        "assigning variable Sigma");
            current_statement_begin__ = 205;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_min_max((p + 1), (p + q)), stan::model::cons_list(stan::model::index_min_max(1, p), stan::model::nil_index_list())), 
                        transpose(top_right), 
                        "assigning variable Sigma");
            current_statement_begin__ = 206;
            stan::model::assign(Sigma, 
                        stan::model::cons_list(stan::model::index_min_max((p + 1), (p + q)), stan::model::cons_list(stan::model::index_min_max((p + 1), (p + q)), stan::model::nil_index_list())), 
                        quad_form(PHI,Lambda_xt), 
                        "assigning variable Sigma");
            current_statement_begin__ = 207;
            for (int i = 1; i <= q; ++i) {
                {
                current_statement_begin__ = 208;
                int ip(0);
                (void) ip;  // dummy to suppress unused var warning

                stan::math::fill(ip, std::numeric_limits<int>::min());
                stan::math::assign(ip,(i + p));


                current_statement_begin__ = 209;
                stan::math::assign(get_base1_lhs(Sigma,ip,ip,"Sigma",1), (get_base1(Sigma,ip,ip,"Sigma",1) + square(get_base1(delta_sd,i,"delta_sd",1))));
                }
            }
            current_statement_begin__ = 213;
            lp_accum__.add(wishart_log(S,(N - 1),multiply(0.5,add(Sigma,transpose(Sigma)))));
            current_statement_begin__ = 216;
            lp_accum__.add(normal_log(stan::model::rvalue(Lambda_y_free, stan::model::cons_list(stan::model::index_multi(small_w1), stan::model::nil_index_list()), "Lambda_y_free"),0,sd1));
            current_statement_begin__ = 217;
            lp_accum__.add(normal_log(stan::model::rvalue(Lambda_x_free, stan::model::cons_list(stan::model::index_multi(small_w2), stan::model::nil_index_list()), "Lambda_x_free"),0,sd2));
            current_statement_begin__ = 218;
            lp_accum__.add(normal_log(stan::model::rvalue(Gamma_free, stan::model::cons_list(stan::model::index_multi(small_w3), stan::model::nil_index_list()), "Gamma_free"),0,sd3));
            current_statement_begin__ = 219;
            lp_accum__.add(normal_log(stan::model::rvalue(B_free, stan::model::cons_list(stan::model::index_multi(small_w4), stan::model::nil_index_list()), "B_free"),0,sd4));
            current_statement_begin__ = 221;
            lp_accum__.add(lkj_corr_cholesky_log(L_Phi,1));
            current_statement_begin__ = 222;
            lp_accum__.add(lkj_corr_cholesky_log(L_Psi,1));
            current_statement_begin__ = 224;
            lp_accum__.add(exponential_log(epsilon_sd,epsilon_sd_rate));
            current_statement_begin__ = 225;
            lp_accum__.add(exponential_log(delta_sd,delta_sd_rate));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Lambda_y_free");
        names__.push_back("Lambda_x_free");
        names__.push_back("Gamma_free");
        names__.push_back("B_free");
        names__.push_back("L_Psi");
        names__.push_back("L_Phi");
        names__.push_back("epsilon_sd");
        names__.push_back("delta_sd");
        names__.push_back("Lambda_y");
        names__.push_back("Lambda_x");
        names__.push_back("Gamma");
        names__.push_back("B");
        names__.push_back("Psi");
        names__.push_back("PHI");
        names__.push_back("A");
        names__.push_back("total_xi_eta");
        names__.push_back("indirect_xi_eta");
        names__.push_back("total_eta_eta");
        names__.push_back("indirect_eta_eta");
        names__.push_back("total_eta_y");
        names__.push_back("indirect_eta_y");
        names__.push_back("total_xi_y");
        names__.push_back("eta");
        names__.push_back("xi");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(len_free1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_free2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_free3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_free4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((has_data ? m : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((has_data ? n : 0 ));
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_LERSIL_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d Lambda_y_free = in__.vector_constrain(len_free1);
        vector_d Lambda_x_free = in__.vector_constrain(len_free2);
        vector_d Gamma_free = in__.vector_constrain(len_free3);
        vector_d B_free = in__.vector_constrain(len_free4);
        matrix_d L_Psi = in__.cholesky_corr_constrain(m);
        matrix_d L_Phi = in__.cholesky_corr_constrain(n);
        vector_d epsilon_sd = in__.vector_lb_constrain(0,p);
        vector_d delta_sd = in__.vector_lb_constrain(0,q);
            for (int k_0__ = 0; k_0__ < len_free1; ++k_0__) {
            vars__.push_back(Lambda_y_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_free2; ++k_0__) {
            vars__.push_back(Lambda_x_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_free3; ++k_0__) {
            vars__.push_back(Gamma_free[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < len_free4; ++k_0__) {
            vars__.push_back(B_free[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(L_Psi(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n; ++k_0__) {
                vars__.push_back(L_Phi(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < p; ++k_0__) {
            vars__.push_back(epsilon_sd[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < q; ++k_0__) {
            vars__.push_back(delta_sd[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 184;
            validate_non_negative_index("Lambda_y", "p", p);
            validate_non_negative_index("Lambda_y", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_y(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(m));
            (void) Lambda_y;  // dummy to suppress unused var warning

            stan::math::initialize(Lambda_y, DUMMY_VAR__);
            stan::math::fill(Lambda_y,DUMMY_VAR__);
            stan::math::assign(Lambda_y,fill_matrix(Lambda_y_free,Lambda_y_skeleton, pstream__));
            current_statement_begin__ = 185;
            validate_non_negative_index("Lambda_x", "q", q);
            validate_non_negative_index("Lambda_x", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_x(static_cast<Eigen::VectorXd::Index>(q),static_cast<Eigen::VectorXd::Index>(n));
            (void) Lambda_x;  // dummy to suppress unused var warning

            stan::math::initialize(Lambda_x, DUMMY_VAR__);
            stan::math::fill(Lambda_x,DUMMY_VAR__);
            stan::math::assign(Lambda_x,fill_matrix(Lambda_x_free,Lambda_x_skeleton, pstream__));
            current_statement_begin__ = 186;
            validate_non_negative_index("Gamma", "m", m);
            validate_non_negative_index("Gamma", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Gamma(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
            (void) Gamma;  // dummy to suppress unused var warning

            stan::math::initialize(Gamma, DUMMY_VAR__);
            stan::math::fill(Gamma,DUMMY_VAR__);
            stan::math::assign(Gamma,fill_matrix(Gamma_free,Gamma_skeleton, pstream__));
            current_statement_begin__ = 187;
            validate_non_negative_index("B", "m", m);
            validate_non_negative_index("B", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  B(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            (void) B;  // dummy to suppress unused var warning

            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B,DUMMY_VAR__);
            stan::math::assign(B,fill_matrix(B_free,B_skeleton, pstream__));
            current_statement_begin__ = 189;
            validate_non_negative_index("Psi", "m", m);
            validate_non_negative_index("Psi", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Psi(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            (void) Psi;  // dummy to suppress unused var warning

            stan::math::initialize(Psi, DUMMY_VAR__);
            stan::math::fill(Psi,DUMMY_VAR__);
            stan::math::assign(Psi,multiply_lower_tri_self_transpose(L_Psi));
            current_statement_begin__ = 190;
            validate_non_negative_index("PHI", "n", n);
            validate_non_negative_index("PHI", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  PHI(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(n));
            (void) PHI;  // dummy to suppress unused var warning

            stan::math::initialize(PHI, DUMMY_VAR__);
            stan::math::fill(PHI,DUMMY_VAR__);
            stan::math::assign(PHI,multiply_lower_tri_self_transpose(L_Phi));



            // validate transformed parameters
            current_statement_begin__ = 184;
            current_statement_begin__ = 185;
            current_statement_begin__ = 186;
            current_statement_begin__ = 187;
            current_statement_begin__ = 189;
            current_statement_begin__ = 190;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < p; ++k_0__) {
                vars__.push_back(Lambda_y(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < q; ++k_0__) {
                vars__.push_back(Lambda_x(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(Gamma(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(B(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(Psi(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n; ++k_0__) {
                vars__.push_back(PHI(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 229;
            validate_non_negative_index("A", "m", m);
            validate_non_negative_index("A", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  A(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            (void) A;  // dummy to suppress unused var warning

            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A,DUMMY_VAR__);
            stan::math::assign(A,mdivide_left_tri_low(subtract(I,B),I));
            current_statement_begin__ = 230;
            validate_non_negative_index("total_xi_eta", "m", m);
            validate_non_negative_index("total_xi_eta", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  total_xi_eta(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
            (void) total_xi_eta;  // dummy to suppress unused var warning

            stan::math::initialize(total_xi_eta, DUMMY_VAR__);
            stan::math::fill(total_xi_eta,DUMMY_VAR__);
            stan::math::assign(total_xi_eta,multiply(A,Gamma));
            current_statement_begin__ = 231;
            validate_non_negative_index("indirect_xi_eta", "m", m);
            validate_non_negative_index("indirect_xi_eta", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  indirect_xi_eta(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(n));
            (void) indirect_xi_eta;  // dummy to suppress unused var warning

            stan::math::initialize(indirect_xi_eta, DUMMY_VAR__);
            stan::math::fill(indirect_xi_eta,DUMMY_VAR__);
            stan::math::assign(indirect_xi_eta,subtract(total_xi_eta,Gamma));
            current_statement_begin__ = 232;
            validate_non_negative_index("total_eta_eta", "m", m);
            validate_non_negative_index("total_eta_eta", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  total_eta_eta(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            (void) total_eta_eta;  // dummy to suppress unused var warning

            stan::math::initialize(total_eta_eta, DUMMY_VAR__);
            stan::math::fill(total_eta_eta,DUMMY_VAR__);
            stan::math::assign(total_eta_eta,subtract(A,I));
            current_statement_begin__ = 233;
            validate_non_negative_index("indirect_eta_eta", "m", m);
            validate_non_negative_index("indirect_eta_eta", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  indirect_eta_eta(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
            (void) indirect_eta_eta;  // dummy to suppress unused var warning

            stan::math::initialize(indirect_eta_eta, DUMMY_VAR__);
            stan::math::fill(indirect_eta_eta,DUMMY_VAR__);
            stan::math::assign(indirect_eta_eta,subtract(total_eta_eta,B));
            current_statement_begin__ = 234;
            validate_non_negative_index("total_eta_y", "p", p);
            validate_non_negative_index("total_eta_y", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  total_eta_y(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(m));
            (void) total_eta_y;  // dummy to suppress unused var warning

            stan::math::initialize(total_eta_y, DUMMY_VAR__);
            stan::math::fill(total_eta_y,DUMMY_VAR__);
            stan::math::assign(total_eta_y,multiply(Lambda_y,A));
            current_statement_begin__ = 235;
            validate_non_negative_index("indirect_eta_y", "p", p);
            validate_non_negative_index("indirect_eta_y", "m", m);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  indirect_eta_y(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(m));
            (void) indirect_eta_y;  // dummy to suppress unused var warning

            stan::math::initialize(indirect_eta_y, DUMMY_VAR__);
            stan::math::fill(indirect_eta_y,DUMMY_VAR__);
            stan::math::assign(indirect_eta_y,subtract(total_eta_y,Lambda_y));
            current_statement_begin__ = 236;
            validate_non_negative_index("total_xi_y", "p", p);
            validate_non_negative_index("total_xi_y", "n", n);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  total_xi_y(static_cast<Eigen::VectorXd::Index>(p),static_cast<Eigen::VectorXd::Index>(n));
            (void) total_xi_y;  // dummy to suppress unused var warning

            stan::math::initialize(total_xi_y, DUMMY_VAR__);
            stan::math::fill(total_xi_y,DUMMY_VAR__);
            stan::math::assign(total_xi_y,multiply(total_eta_y,Gamma));
            current_statement_begin__ = 238;
            validate_non_negative_index("eta", "N", N);
            validate_non_negative_index("eta", "(has_data ? m : 0 )", (has_data ? m : 0 ));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  eta(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>((has_data ? m : 0 )));
            (void) eta;  // dummy to suppress unused var warning

            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta,DUMMY_VAR__);
            current_statement_begin__ = 239;
            validate_non_negative_index("xi", "N", N);
            validate_non_negative_index("xi", "(has_data ? n : 0 )", (has_data ? n : 0 ));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  xi(static_cast<Eigen::VectorXd::Index>(N),static_cast<Eigen::VectorXd::Index>((has_data ? n : 0 )));
            (void) xi;  // dummy to suppress unused var warning

            stan::math::initialize(xi, DUMMY_VAR__);
            stan::math::fill(xi,DUMMY_VAR__);


            current_statement_begin__ = 241;
            if (as_bool(has_data)) {
                {
                current_statement_begin__ = 242;
                validate_non_negative_index("Psi_star", "m", m);
                validate_non_negative_index("Psi_star", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Psi_star(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
                (void) Psi_star;  // dummy to suppress unused var warning

                stan::math::initialize(Psi_star, DUMMY_VAR__);
                stan::math::fill(Psi_star,DUMMY_VAR__);
                stan::math::assign(Psi_star,multiply_lower_tri_self_transpose(multiply(A,L_Psi)));
                current_statement_begin__ = 243;
                validate_non_negative_index("Pi_t", "n", n);
                validate_non_negative_index("Pi_t", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Pi_t(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(m));
                (void) Pi_t;  // dummy to suppress unused var warning

                stan::math::initialize(Pi_t, DUMMY_VAR__);
                stan::math::fill(Pi_t,DUMMY_VAR__);
                stan::math::assign(Pi_t,transpose(total_xi_eta));
                current_statement_begin__ = 244;
                validate_non_negative_index("Lambda_yt", "m", m);
                validate_non_negative_index("Lambda_yt", "p", p);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_yt(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(p));
                (void) Lambda_yt;  // dummy to suppress unused var warning

                stan::math::initialize(Lambda_yt, DUMMY_VAR__);
                stan::math::fill(Lambda_yt,DUMMY_VAR__);
                stan::math::assign(Lambda_yt,transpose(Lambda_y));
                current_statement_begin__ = 245;
                validate_non_negative_index("Lambda_xt", "n", n);
                validate_non_negative_index("Lambda_xt", "q", q);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  Lambda_xt(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(q));
                (void) Lambda_xt;  // dummy to suppress unused var warning

                stan::math::initialize(Lambda_xt, DUMMY_VAR__);
                stan::math::fill(Lambda_xt,DUMMY_VAR__);
                stan::math::assign(Lambda_xt,transpose(Lambda_x));
                current_statement_begin__ = 246;
                validate_non_negative_index("cov_eta_xi", "n", n);
                validate_non_negative_index("cov_eta_xi", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cov_eta_xi(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(m));
                (void) cov_eta_xi;  // dummy to suppress unused var warning

                stan::math::initialize(cov_eta_xi, DUMMY_VAR__);
                stan::math::fill(cov_eta_xi,DUMMY_VAR__);
                stan::math::assign(cov_eta_xi,multiply(PHI,Pi_t));
                current_statement_begin__ = 247;
                validate_non_negative_index("cov_x_eta", "q", q);
                validate_non_negative_index("cov_x_eta", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cov_x_eta(static_cast<Eigen::VectorXd::Index>(q),static_cast<Eigen::VectorXd::Index>(m));
                (void) cov_x_eta;  // dummy to suppress unused var warning

                stan::math::initialize(cov_x_eta, DUMMY_VAR__);
                stan::math::fill(cov_x_eta,DUMMY_VAR__);
                stan::math::assign(cov_x_eta,multiply(Lambda_x,cov_eta_xi));
                current_statement_begin__ = 248;
                validate_non_negative_index("cov_y_xi", "n", n);
                validate_non_negative_index("cov_y_xi", "p", p);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cov_y_xi(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(p));
                (void) cov_y_xi;  // dummy to suppress unused var warning

                stan::math::initialize(cov_y_xi, DUMMY_VAR__);
                stan::math::fill(cov_y_xi,DUMMY_VAR__);
                stan::math::assign(cov_y_xi,multiply(cov_eta_xi,Lambda_yt));
                current_statement_begin__ = 249;
                validate_non_negative_index("cov_y_x", "q", q);
                validate_non_negative_index("cov_y_x", "p", p);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cov_y_x(static_cast<Eigen::VectorXd::Index>(q),static_cast<Eigen::VectorXd::Index>(p));
                (void) cov_y_x;  // dummy to suppress unused var warning

                stan::math::initialize(cov_y_x, DUMMY_VAR__);
                stan::math::fill(cov_y_x,DUMMY_VAR__);
                stan::math::assign(cov_y_x,multiply(Lambda_x,cov_y_xi));
                current_statement_begin__ = 250;
                validate_non_negative_index("cov_x_xi", "n", n);
                validate_non_negative_index("cov_x_xi", "q", q);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cov_x_xi(static_cast<Eigen::VectorXd::Index>(n),static_cast<Eigen::VectorXd::Index>(q));
                (void) cov_x_xi;  // dummy to suppress unused var warning

                stan::math::initialize(cov_x_xi, DUMMY_VAR__);
                stan::math::fill(cov_x_xi,DUMMY_VAR__);
                stan::math::assign(cov_x_xi,multiply(PHI,Lambda_xt));
                current_statement_begin__ = 251;
                validate_non_negative_index("cov_eta", "m", m);
                validate_non_negative_index("cov_eta", "m", m);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  cov_eta(static_cast<Eigen::VectorXd::Index>(m),static_cast<Eigen::VectorXd::Index>(m));
                (void) cov_eta;  // dummy to suppress unused var warning

                stan::math::initialize(cov_eta, DUMMY_VAR__);
                stan::math::fill(cov_eta,DUMMY_VAR__);
                stan::math::assign(cov_eta,add(quad_form_sym(PHI,Pi_t),Psi_star));
                current_statement_begin__ = 253;
                validate_non_negative_index("top_left", "(p + q)", (p + q));
                validate_non_negative_index("top_left", "(p + q)", (p + q));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  top_left(static_cast<Eigen::VectorXd::Index>((p + q)),static_cast<Eigen::VectorXd::Index>((p + q)));
                (void) top_left;  // dummy to suppress unused var warning

                stan::math::initialize(top_left, DUMMY_VAR__);
                stan::math::fill(top_left,DUMMY_VAR__);
                stan::math::assign(top_left,append_row(append_col(add(quad_form_sym(cov_eta,Lambda_yt),diag_matrix(square(epsilon_sd))),transpose(cov_y_x)),append_col(cov_y_x,add(quad_form_sym(PHI,Lambda_xt),diag_matrix(square(delta_sd))))));
                current_statement_begin__ = 258;
                validate_non_negative_index("corner", "(m + n)", (m + n));
                validate_non_negative_index("corner", "(p + q)", (p + q));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  corner(static_cast<Eigen::VectorXd::Index>((m + n)),static_cast<Eigen::VectorXd::Index>((p + q)));
                (void) corner;  // dummy to suppress unused var warning

                stan::math::initialize(corner, DUMMY_VAR__);
                stan::math::fill(corner,DUMMY_VAR__);
                stan::math::assign(corner,transpose(append_col(append_row(cov_y_xi,multiply(cov_eta,Lambda_yt)),append_row(cov_x_xi,transpose(cov_x_eta)))));
                current_statement_begin__ = 262;
                validate_non_negative_index("bottom_right", "(m + n)", (m + n));
                validate_non_negative_index("bottom_right", "(m + n)", (m + n));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  bottom_right(static_cast<Eigen::VectorXd::Index>((m + n)),static_cast<Eigen::VectorXd::Index>((m + n)));
                (void) bottom_right;  // dummy to suppress unused var warning

                stan::math::initialize(bottom_right, DUMMY_VAR__);
                stan::math::fill(bottom_right,DUMMY_VAR__);
                stan::math::assign(bottom_right,append_row(append_col(cov_eta,transpose(cov_eta_xi)),append_col(cov_eta_xi,PHI)));
                current_statement_begin__ = 265;
                validate_non_negative_index("precision", "(p + q)", (p + q));
                validate_non_negative_index("precision", "(p + q)", (p + q));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  precision(static_cast<Eigen::VectorXd::Index>((p + q)),static_cast<Eigen::VectorXd::Index>((p + q)));
                (void) precision;  // dummy to suppress unused var warning

                stan::math::initialize(precision, DUMMY_VAR__);
                stan::math::fill(precision,DUMMY_VAR__);
                stan::math::assign(precision,inverse_spd(top_left));
                current_statement_begin__ = 266;
                validate_non_negative_index("L", "(m + n)", (m + n));
                validate_non_negative_index("L", "(m + n)", (m + n));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  L(static_cast<Eigen::VectorXd::Index>((m + n)),static_cast<Eigen::VectorXd::Index>((m + n)));
                (void) L;  // dummy to suppress unused var warning

                stan::math::initialize(L, DUMMY_VAR__);
                stan::math::fill(L,DUMMY_VAR__);
                stan::math::assign(L,cholesky_decompose(subtract(bottom_right,quad_form(precision,corner))));
                current_statement_begin__ = 267;
                validate_non_negative_index("beta", "(m + n)", (m + n));
                validate_non_negative_index("beta", "(p + q)", (p + q));
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  beta(static_cast<Eigen::VectorXd::Index>((m + n)),static_cast<Eigen::VectorXd::Index>((p + q)));
                (void) beta;  // dummy to suppress unused var warning

                stan::math::initialize(beta, DUMMY_VAR__);
                stan::math::fill(beta,DUMMY_VAR__);
                stan::math::assign(beta,multiply(corner,precision));


                current_statement_begin__ = 268;
                for (int i = 1; i <= N; ++i) {
                    {
                    current_statement_begin__ = 269;
                    validate_non_negative_index("latents", "(m + n)", (m + n));
                    Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  latents(static_cast<Eigen::VectorXd::Index>((m + n)));
                    (void) latents;  // dummy to suppress unused var warning

                    stan::math::initialize(latents, DUMMY_VAR__);
                    stan::math::fill(latents,DUMMY_VAR__);
                    stan::math::assign(latents,transpose(multi_normal_cholesky_rng(multiply(beta,get_base1(YX,i,"YX",1)),L, base_rng__)));


                    current_statement_begin__ = 270;
                    stan::model::assign(eta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                head(latents,m), 
                                "assigning variable eta");
                    current_statement_begin__ = 271;
                    stan::model::assign(xi, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                                tail(latents,n), 
                                "assigning variable xi");
                    }
                }
                }
            }

            // validate generated quantities
            current_statement_begin__ = 229;
            current_statement_begin__ = 230;
            current_statement_begin__ = 231;
            current_statement_begin__ = 232;
            current_statement_begin__ = 233;
            current_statement_begin__ = 234;
            current_statement_begin__ = 235;
            current_statement_begin__ = 236;
            current_statement_begin__ = 238;
            current_statement_begin__ = 239;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(A(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(total_xi_eta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(indirect_xi_eta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(total_eta_eta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < m; ++k_0__) {
                vars__.push_back(indirect_eta_eta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < p; ++k_0__) {
                vars__.push_back(total_eta_y(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < m; ++k_1__) {
                for (int k_0__ = 0; k_0__ < p; ++k_0__) {
                vars__.push_back(indirect_eta_y(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < n; ++k_1__) {
                for (int k_0__ = 0; k_0__ < p; ++k_0__) {
                vars__.push_back(total_xi_y(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (has_data ? m : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(eta(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < (has_data ? n : 0 ); ++k_1__) {
                for (int k_0__ = 0; k_0__ < N; ++k_0__) {
                vars__.push_back(xi(k_0__, k_1__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_LERSIL";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= len_free1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Lambda_y_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_free2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Lambda_x_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_free3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Gamma_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_free4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Psi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L_Phi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon_sd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_sd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Lambda_y" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Lambda_x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Gamma" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "B" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Psi" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "PHI" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_xi_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indirect_xi_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_eta_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indirect_eta_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_eta_y" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indirect_eta_y" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_xi_y" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (has_data ? m : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (has_data ? n : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= len_free1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Lambda_y_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_free2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Lambda_x_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_free3; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Gamma_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= len_free4; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "B_free" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((m * (m - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Psi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((n * (n - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L_Phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "epsilon_sd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_sd" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Lambda_y" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= q; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Lambda_x" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Gamma" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "B" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Psi" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "PHI" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_xi_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indirect_xi_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_eta_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= m; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indirect_eta_eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_eta_y" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= m; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "indirect_eta_y" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= n; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= p; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "total_xi_y" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (has_data ? m : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= (has_data ? n : 0 ); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xi" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }

}; // model

}

typedef model_LERSIL_namespace::model_LERSIL stan_model;


#endif
